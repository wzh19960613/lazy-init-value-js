{
  "version": 3,
  "sources": ["..\\src\\index.ts"],
  "sourcesContent": [
    "class LazyInitValueBase<FN> {\r\n    static autoFreeze = true\r\n\r\n    protected _initFn?: FN\r\n    protected _autoFreeze?: boolean\r\n\r\n    constructor(initFn: FN, autoFreeze?: boolean) {\r\n        this._initFn = initFn\r\n        this._autoFreeze = autoFreeze ?? LazyInitValue.autoFreeze\r\n    }\r\n\r\n    get inited() { return this._initFn === undefined }\r\n\r\n    reset(initFn: FN) { this._initFn = initFn }\r\n\r\n    freeze() {\r\n        if (Object.isFrozen(this)) return\r\n        delete this._autoFreeze\r\n        Object.freeze(this)\r\n    }\r\n}\r\n\r\nexport class LazyInitNull extends LazyInitValueBase<null> {\r\n    static get autoFreeze() { return LazyInitValueBase.autoFreeze }\r\n    static set autoFreeze(autoFreeze: boolean) { LazyInitValueBase.autoFreeze = autoFreeze }\r\n\r\n    constructor(autoFreeze?: boolean) { super(null, autoFreeze) }\r\n\r\n    init() {\r\n        if (this.inited) return false\r\n        delete this._initFn\r\n        if (this._autoFreeze) this.freeze()\r\n        return true\r\n    }\r\n\r\n    get value() { return this.init(), null }\r\n}\r\n\r\nexport class LazyInitValue<T> extends LazyInitValueBase<() => T> {\r\n    static get autoFreeze() { return LazyInitValueBase.autoFreeze }\r\n    static set autoFreeze(autoFreeze: boolean) { LazyInitValueBase.autoFreeze = autoFreeze }\r\n\r\n    #value?: T\r\n\r\n    constructor(initFn: () => T, autoFreeze?: boolean) { super(initFn, autoFreeze) }\r\n\r\n    init() {\r\n        if (!this._initFn) return false\r\n        this.#value = this._initFn()\r\n        delete this._initFn\r\n        if (this._autoFreeze) this.freeze()\r\n        return true\r\n    }\r\n\r\n    get value() { return this.init(), this.#value as T }\r\n}\r\n\r\nexport class LazyAsyncInitValue<T> extends LazyInitValueBase<() => Promise<T>> {\r\n    static get autoFreeze() { return LazyInitValueBase.autoFreeze }\r\n    static set autoFreeze(autoFreeze: boolean) { LazyInitValueBase.autoFreeze = autoFreeze }\r\n\r\n    #value?: T\r\n\r\n    constructor(initFn: () => Promise<T>, autoFreeze?: boolean) { super(initFn, autoFreeze) }\r\n\r\n    get initing() { return this._initing || false }\r\n\r\n    value() {\r\n        if (!this._initFn) return this.#value as T\r\n        return this._make_promise_and_init<T>()\r\n    }\r\n\r\n    init() {\r\n        if (!this._initFn) return false\r\n        return this._make_promise_and_init<true>(resolve => () => resolve(true))\r\n    }\r\n\r\n    get value_sync() {\r\n        if (!this._initFn) return this.#value\r\n        if (!this._initing) this._init_value()\r\n    }\r\n\r\n    protected _initing?: true\r\n    protected _resolvers?: ((value: T) => void)[] = []\r\n    protected _rejections?: ((reason: any) => void)[] = []\r\n\r\n    protected _init_value() {\r\n        this._initing = true\r\n        this._initFn!().then(value => {\r\n            this.#value = value\r\n            delete this._initFn\r\n            delete this._initing\r\n            for (const res of this._resolvers ?? []) res(value)\r\n            delete this._resolvers\r\n            delete this._rejections\r\n            if (this._autoFreeze) this.freeze()\r\n        }).catch(reason => {\r\n            delete this._initing\r\n            for (const rej of this._rejections ?? []) rej(reason)\r\n            delete this._resolvers\r\n            delete this._rejections\r\n        })\r\n    }\r\n\r\n    protected _make_promise_and_init<R>(fn?: (resolve: (value: R) => void) => (value: T) => void) {\r\n        if (!this._resolvers) { this._resolvers = []; this._rejections = [] }\r\n        return new Promise<R>((resolve, reject) => {\r\n            this._resolvers!.push(fn ? fn(resolve) : resolve as unknown as (value: T) => void)\r\n            this._rejections!.push(reject)\r\n            if (!this._initing) this._init_value()\r\n        })\r\n    }\r\n}"
  ],
  "mappings": "AAAA,MAAM,CAAsB,OACjB,YAAa,GAEV,QACA,YAEV,WAAW,CAAC,EAAY,EAAsB,CAC1C,KAAK,QAAU,EACf,KAAK,YAAc,GAAc,EAAc,cAG/C,OAAM,EAAG,CAAE,OAAO,KAAK,UAAY,OAEvC,KAAK,CAAC,EAAY,CAAE,KAAK,QAAU,EAEnC,MAAM,EAAG,CACL,GAAI,OAAO,SAAS,IAAI,EAAG,OAC3B,OAAO,KAAK,YACZ,OAAO,OAAO,IAAI,EAE1B,CAEO,MAAM,UAAqB,CAAwB,WAC3C,WAAU,EAAG,CAAE,OAAO,EAAkB,qBACxC,WAAU,CAAC,EAAqB,CAAE,EAAkB,WAAa,EAE5E,WAAW,CAAC,EAAsB,CAAE,MAAM,KAAM,CAAU,EAE1D,IAAI,EAAG,CACH,GAAI,KAAK,OAAQ,MAAO,GAExB,UADO,KAAK,QACR,KAAK,YAAa,KAAK,OAAO,EAClC,MAAO,MAGP,MAAK,EAAG,CAAE,OAAO,KAAK,KAAK,EAAG,KACtC,CAEO,MAAM,UAAyB,CAA2B,WAClD,WAAU,EAAG,CAAE,OAAO,EAAkB,qBACxC,WAAU,CAAC,EAAqB,CAAE,EAAkB,WAAa,EAE5E,GAEA,WAAW,CAAC,EAAiB,EAAsB,CAAE,MAAM,EAAQ,CAAU,EAE7E,IAAI,EAAG,CACH,IAAK,KAAK,QAAS,MAAO,GAG1B,GAFA,KAAK,GAAS,KAAK,QAAQ,SACpB,KAAK,QACR,KAAK,YAAa,KAAK,OAAO,EAClC,MAAO,MAGP,MAAK,EAAG,CAAE,OAAO,KAAK,KAAK,EAAG,KAAK,GAC3C,CAEO,MAAM,UAA8B,CAAoC,WAChE,WAAU,EAAG,CAAE,OAAO,EAAkB,qBACxC,WAAU,CAAC,EAAqB,CAAE,EAAkB,WAAa,EAE5E,GAEA,WAAW,CAAC,EAA0B,EAAsB,CAAE,MAAM,EAAQ,CAAU,KAElF,QAAO,EAAG,CAAE,OAAO,KAAK,UAAY,GAExC,KAAK,EAAG,CACJ,IAAK,KAAK,QAAS,OAAO,KAAK,GAC/B,OAAO,KAAK,uBAA0B,EAG1C,IAAI,EAAG,CACH,IAAK,KAAK,QAAS,MAAO,GAC1B,OAAO,KAAK,uBAA6B,KAAW,IAAM,EAAQ,EAAI,CAAC,KAGvE,WAAU,EAAG,CACb,IAAK,KAAK,QAAS,OAAO,KAAK,GAC/B,IAAK,KAAK,SAAU,KAAK,YAAY,EAG/B,SACA,WAAsC,CAAC,EACvC,YAA0C,CAAC,EAE3C,WAAW,EAAG,CACpB,KAAK,SAAW,GAChB,KAAK,QAAS,EAAE,KAAK,KAAS,CAC1B,KAAK,GAAS,SACP,KAAK,eACL,KAAK,SACZ,QAAW,KAAO,KAAK,YAAc,CAAC,EAAG,EAAI,CAAK,EAGlD,UAFO,KAAK,kBACL,KAAK,YACR,KAAK,YAAa,KAAK,OAAO,EACrC,EAAE,MAAM,KAAU,CACf,OAAO,KAAK,SACZ,QAAW,KAAO,KAAK,aAAe,CAAC,EAAG,EAAI,CAAM,EACpD,OAAO,KAAK,kBACL,KAAK,YACf,EAGK,sBAAyB,CAAC,EAA0D,CAC1F,IAAK,KAAK,WAAc,KAAK,WAAa,CAAC,EAAG,KAAK,YAAc,CAAC,EAClE,OAAO,IAAI,QAAW,CAAC,EAAS,IAAW,CAGvC,GAFA,KAAK,WAAY,KAAK,EAAK,EAAG,CAAO,EAAI,CAAwC,EACjF,KAAK,YAAa,KAAK,CAAM,GACxB,KAAK,SAAU,KAAK,YAAY,EACxC,EAET",
  "debugId": "DDD0CF933D7DA85F64756E2164756E21",
  "names": []
}